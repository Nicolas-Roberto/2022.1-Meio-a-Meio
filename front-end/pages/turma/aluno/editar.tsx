import React, { useState, ChangeEvent, useEffect } from "react";
import Avatar from "@mui/material/Avatar";
import Button from "@mui/material/Button";
import CssBaseline from "@mui/material/CssBaseline";
import TextField from "@mui/material/TextField";
import FormControlLabel from "@mui/material/FormControlLabel";
import Checkbox from "@mui/material/Checkbox";
import Link from "@mui/material/Link";
import Grid from "@mui/material/Grid";
import Box from "@mui/material/Box";
import LockOutlinedIcon from "@mui/icons-material/LockOutlined";
import Typography from "@mui/material/Typography";
import Container from "@mui/material/Container";
import { createTheme, ThemeProvider } from "@mui/material/styles";
import Image from "next/image";
import Head from "next/head";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import InputLabel from "@mui/material/InputLabel";
import FormControl from "@mui/material/FormControl";
import NativeSelect from "@mui/material/NativeSelect";
import Select, { SelectChangeEvent } from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import apiRequest from "../../../util/apiRequest";
import FormHelperText from "@mui/material/FormHelperText";
import Radio from "@mui/material/Radio";
import RadioGroup from "@mui/material/RadioGroup";
import FormLabel from "@mui/material/FormLabel";
import Moment from "moment";
import { useRouter } from "next/router";
import Alert from "@mui/material/Alert";
import CloseIcon from "@mui/icons-material/Close";
import IconButton from "@mui/material/IconButton";
import Collapse from "@mui/material/Collapse";

const theme = createTheme();

export default function MudarAlunoDeTurma({
  listaTurmas: listaTurmas,
  error,
}) {
  const [value, setValue] = useState<Date | null>(null);
  const [data, setData] = useState<any>({});
  const [errors, setErrors] = useState<any>({});
  const router = useRouter();
  console.log(router.query);
  const [open, setOpen] = useState(false);
  const [close, setClose] = useState(false);
  const [turma, setTurma] = useState<any>([]);

  useEffect(() => {
    if (Object.keys(router.query).length === 0) {
      router.push("/aluno/portal");
    }
    setData(router.query);
  }, []);
  useEffect(() => {
    if (listaTurmas) {
        setTurma(listaTurmas);
    }
    console.log(listaTurmas);
    console.log(error);
    //erros
  }, []);

  const handleUfRegion = (e: SelectChangeEvent<HTMLInputElement>) => {
    setData({ ...data, [e.target.name]: e.target.value });
    let tempErrors = errors;
    delete tempErrors[e.target.name];
    setErrors(tempErrors);
    console.log(e.target.value);
    console.log(e.target.name);
  };

  const handleDate = (e: SelectChangeEvent<HTMLInputElement>) => {
    console.log(e);
    const formatedData = Moment(e).format("yyyy/MM/DD");
    setData({ ...data, data_de_nascimento: formatedData });
  };

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (handleCheckData()) {
      console.log("bbbb");
      return;
    }
    console.log("aaaa");
    apiRequest
      .post("aluno", { ...data})
      .then((result) => {
        setOpen(true);
        router.push("/turma/aluno/listar");
        console.log("ok");
      })
      .catch((err) => {
        console.log("errado", err);
      });

    const date = new FormData(event.currentTarget);
  };

  const handleText = (e: ChangeEvent<HTMLInputElement>) => {
    const clearText = e.target.value.replace(/\d/, "");
    setData({ ...data, [e.target.name]: clearText });
    let tempErrors = errors;
    delete tempErrors[e.target.name];
    setErrors(tempErrors);
  };
  const handleNumber = (e: ChangeEvent<HTMLInputElement>) => {
    const clearNumber = e.target.value.replace(/\D/, "");
    setData({ ...data, [e.target.name]: clearNumber });
  };
  
  const handleCheckData = () => {
    const {
      turma_id,
    } = data;
    console.log(data);
    let emptyFields: any = {};

    if (!turma_id || turma_id.length === 0) {
      emptyFields.turma_id = "Turma inválida";
    }
    if (Object.keys(emptyFields).length > 0) {
      setErrors(emptyFields);
      return 1;
    }
    return 0;
  };

  return (
    <ThemeProvider theme={theme}>
      <Container component="main" maxWidth="lg">
        <CssBaseline />
        <Box
          sx={{
            marginTop: 8,
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
          }}
        >
          <div>
            <Head>
              <title>Galdi</title>
              <meta name="description" content="Generated by meio a meio" />
            </Head>
            {/* <Image src= "/images/logo.jpeg" width= '600px' height= '150px'/> */}
          </div>
          <Typography component="h1" variant="h5">
            Aluno:
          </Typography>
          <Box
            component="form"
            noValidate
            onSubmit={handleSubmit}
            sx={{ mt: 3 }}
          >
            <Grid container spacing={2}>
              <Grid item xs={4}>
                <TextField
                disabled
                  required
                  error={errors.nome_completo ? true : false}
                  helperText={errors.nome_completo || null}
                  fullWidth
                  id="nome_completo"
                  label="Nome Completo"
                  name="nome_completo"
                  autoComplete="nome_completo"
                  onChange={handleText}
                  value={data ? data.nome_completo : ""}
                />
              </Grid>
              <Grid item xs={3}>
                <FormControl sx={{ m: 0, minWidth: 150 }}>
                  <InputLabel id="turma_id" required>
                    Turma
                  </InputLabel>
                  <Select
                    required
                    fullWidth
                    error={errors.turma_id ? true : false}
                    onChange={(e) =>
                      setData({ ...data, turma_id: e.target.value })
                    }
                    label={"Turma"}
                    value={data ? data.turma_id : ""}
                  >
                    {turma.map((i, index) => (
                      <MenuItem key={index} value={i.id}>
                        {i.nomeTurma}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
            >
              Editar Aluno
            </Button>
            <Collapse in={open}>
              <Alert
              severity="success"
                action={
                  <IconButton
                    aria-label="close"
                    color="inherit"
                    size="small"
                    onClick={() => {
                      setOpen(false);
                    }}
                  >
                    <CloseIcon fontSize="inherit" />
                  </IconButton>
                }
                sx={{ mb: 2 }}
              >
                Alterações realizadas com sucesso!
              </Alert>
            </Collapse>
            <Collapse in={close}>
              <Alert
              severity="error"
                action={
                  <IconButton
                    aria-label="close"
                    color="inherit"
                    size="small"
                    onClick={() => {
                      setClose(false);
                    }}
                  >
                    <CloseIcon fontSize="inherit" />
                  </IconButton>
                }
                sx={{ mb: 2 }}
              >
                Falha ao editar o usuário!
              </Alert>
            </Collapse>
            <Grid container justifyContent="center">
              <Grid item>
                <Link href="/turma/aluno/listar" variant="body2">
                  Voltar ao Menu Principal
                </Link>
              </Grid>
            </Grid>
            <Grid container justifyContent="center"></Grid>
          </Box>
        </Box>
      </Container>
    </ThemeProvider>
  );
}
export async function getServerSideProps() {
  const resTurma = await apiRequest.get('turma') //lista de professoress
  if(!resTurma || !resTurma.data){
    return {props: {error: 'Falha ao carregar conteúdo'}}
  }

  return {
    props: {
      listaTurmas: resTurma.data,
      error: null,
    },
  };
}